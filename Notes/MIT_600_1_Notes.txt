Links
  https://docs.python.org/3/tutorial/index.html
  http://www.clevcode.org/cicada-3301/
  https://www.youtube.com/watch?v=svJF_FoSI9o

WEEK 1

  Types of Info
    Declarative info: statement of fact
    Imperative info: how to

  Definitions
    Syntax: is the string legal
    Static semantics: does the string have meaning
    Semantics: the assigned meaning of a legal syntax string

  Scalar types
    Int: Normal integer
    Float: Real number with decimal places
    Bool: Boolean true false
    Nonetype: Has no type

  Basic Structure
    [Object][Operator][Object]

  Operators
    -,+ Addition and subtraction
    *,/ Multiplication and division
    // Division to the whole number (leaves off the remainder)
    ** exponential
    % returns the remainder

  Tests
    > greater than
    >= greater than or equal to
    < less than
    <= less than or equal to
    == equal
    != not equal

  Variables (bindings)
    Names that can have values associated with them
      "Name" = "value or expression"
        x=2
        x=x*x
    Names should be descriptive
    Some key words can't be used as a name (int, float ...)
    Values can be updated by re-assigning

  Strings
    Sequence of CASE SENSETIVE characters
    Contained within double or single quotes
    Strings are non-scalar (pieces can be extracted from them)
    Can be Indexed and sliced
      Elements start counting at 0
      Indexed using []
      Sliced using [::]
          [number:] calls everything after element number
          [:number] calls everything before element number
          [:] calls a copy of a string
            Name=cody
            Name[0]: "c"
            Name[1:3]: "od"
            Name[:]="cody"
    Strings are imumutable
      Can not be changed without being redefined

  Output
    Print: outputs a value to the screen
    A comma will seperate each arugment with a space
    use + to concatenate within operation

  Input
    Prints a string as a prompt, takes user input and assigns to bound variable
    Doesn't need quotes to work, will store string with quotes if typed
    Must cast as int or float if using numeric input

  Branching Programs
    Used to make choices
    Runs code once
    Test a condition, run one block of code if test is true and another if test is false
      If condition :
        code
      elif 2nd condition :
        code
      else: code

  While Loop
    Repeat code until condition is false
    Unknown number of itterations
    Can use counter but must initialize and incriment within loop
    Might not be able to rewrite as a for loop
    While  condition :
      Code to run while true
    Have a variable outside of loop
    Have something that changes variable inside loop
      Otherwise it's an infinite loop

  For Loop
    Easier to capture itterations
    Known number of itterations
    Uses a counter, doesn't need initialized or incrimented
    Can rewrite as while loop
    for variable in expression:
      Code

  Range()
    incriments to a number
    (Start,Stop,Incriment)
    Default is (0,number,1)
    If increment is negative, order is reversed

  Break
      stops execution of a loop

  Iteration
    Still starts with a test  but loops code until test is false
    Repeat a sequence of steps based on a decision
    Allows for guess and check

  Guess and Check
    Also called itterative algorithms
    Use loops to generate and check guesses until a solution is found
    Three types
      Exhaustive
        Check every possible guess
      Bisectonal
        Reduce search area by half each guess
      Newton-Raphson
        Use a derivitive function to generate the next guess

  Using a loop variable
    Initialized outside loop
    Used to check for completion

  Decrementing Function
    Maps program variables to intigers
    Starts at a non-negative value and decreases each time loop runs
    Loop ends when variable <=0

  Possible Errors
    Forgot to initialize
      Using a variable inside a loop that doesn't exist outside of it
      NameError
      Stops
    Forgot to change variable
      Infinite loop!!!

WEEK 2

  Aproximate Solutions
    Incriment a guess so that you get an answer that is close to the solution
    Steps need to be small enough to be accurate but large enough to not lock up the computer
    Need to define what "close enough" is
    Smaller incriments mean slower program
    Larger "close enough"(epsilon) means less accurate

  Bisection Search
    Check if the guess is between 1 and input
    Keep cutting in half, checking if smaller or larger
    Continues to return smaller and smaller pieces to check until acceptable aproximation is found

  Floating Point Numbers
    Floats approximate real numbers
    Numbers are stored in binary
    Can not store infinite digits

  Newton-Raphson
    P(x) is some polynomial
    find r such that p(r)=0
    g-p(g)/p'(g)

  Decomposition
    Smaller pieces working together in sync to achieve a goal
    Breaking a problem into smaller self contained pieces
    Modules should be self contained and reusable
      Helps structure

  Abstraction
    Black box concept
      Done neet to know how it works to use it
    Once its built, dont need to know whats inside it, as long as you know how it works
    Suppress the details
    Achieved with function spec or doc string

  Functions
    chunks of code that are not run until called or invoked
    Functions parts
      names- used to refer to it, set by def
      parameters- arguments used inside function, can be 0, contained in ()
      docstring- tells what the function does
      body- sequence of commands to execute
    Structure
      def name (parameters):
        """
        docstring (what's the input and output)
        """
        Code
    Only has meaning INSIDE a function
    Functions have their own scope but can use global variables as inputs
      Can not modify global variables, only access
    Functions need returns
      Only one return will be executed but a function can have multiple returns
      Returns take a value
      Returns stop the computation and give it back to where it was called
    Invocations can use parameter names to bind, but don't need them
      If binding is included in the function def, you can create a default
        Def printname(first, last, reverse=false) would default reverse to false
        You would have to call the function with a different binding to change it
        printname(cody, schierbaum, reverse=true)
    Specifications are like contracts
      In the docstring
      Aontains assumptions and guarantees
      Assumptions are conditions that must be met
      Guarantees are condtions that will happen if the assumptions are met

  Recursion
    Design solutions by breaking it into reusable chunks; Divide and conquer
      Where a function calls itself
      Goal is not infinite recursion
      Must have 1 or more base cases that can be easily solved
      Solve the problem with some other input to simplify a larger problem
      Reduce the problem to a simple case that can be solved directly
    Examples
      Iterative multiplication
        Multiplication is the same as addition multiple times
        A*B = A+A+A+A... B times
          while B>0
            result+=a
            b-=1
          return result
      Recursive multiplication
        Base case: if b=1 then a*b =a
        Def mult(a,b)
          If B==1
            return A
          else
            return a+ mult(a,b-1)
    Non Numeric Recursion
      Recursion can be used on strings as well
      Can function better than itteration
      Palandrome checker
        String length 0 or 1 is a palandrome
        If the first letter = the last letter, check the next two in

  Inductive Reasoning
    How do you know a recursive code will work
    To prove a statement that is indexed on integers is true for all values of n
      You only need to prove the statement true on the smallest value n
      Then prove it is true for an arbitrary n and it can be shown to be true for n+1
      Can be used to prove recusive function
      Example
        0+1+2...+n=(n(n+1))/2
          Smallest Value
            n=0
            (0(0+1))/2
            0*1/2
            0=0
          Arbitrary
            n=(k+1)
            0+1+2...+k+(k+1)=((k+1)(k+2))/2
        Towers of Hanoi
          Think of the move if you have one ring
            Can move anywhere
          Think of move for 2 rings
            move smaller one to spare, larger one to dest, smaller to dest
          Each move is moving the stack above the largest ring to a spare tower, then to the destination
            This can be written simply using recursion
              If you only have one ring, then move it to the destination
              Otherwise move every ring above the one you want to move to a spare tower
              Move the one you want to move to the destination
              Move the rest of the stack back to the destination

  Files
    Code is stored in modules (.py files)
    Modules are collections of deffinitions and statements
    Modules can be imported and called into other modules
      Import a module with: Import module_name
      Use imported modules with: module_name.deffinition
    If no coliding deffinitions are present, modules can be used in another way
      Import with: from module_name import * (*=everything)
      Call using normal names (no need for module_name.definition)
      Adds bindings in the current scope for everything defined in the imported module
      Statements are only executed the first time a module is imported
    Files can be handled within python with file handles
      open(name,command)
      allows opening, writing and reading, and closing other files

Week 3
  See Lecture 6, slides 12,13 for reference to common operations and properties
  Tuples
    A type of data structure
    An ordered sequence of Elements
    Can include any different kind of element
    Tuples are imutable (element values can't be changed)
    Tuples are represented by parentheses
      te=() is an empty tuple
      t=(1,"one",3)
    Tuples can be indexed with []
    Tuples can be concatenated with +
    Tuples can help swap variables
      Usually need a temporary variable
      Tuples can swap using (x,y)=(y,x)
        Create the tuple for x and y by taking the oposite versions in the tuple
    Return multiple values from a function
    Tuples are itterable
      They can be walked through

  Lists
    Very simmilar to tuples
    Denoted with []
    Usually homogenous
    Lists are mutable
      .append(value) or .extend(values) adds to the end of the list
      del(list[element]) deletes element
      .pop() returns the last element and removes it
      .remove() removes a specified element
        if there are multiples it removes the first
    Lists can convert to and from strings
      using list(string) returns the string with all characters seperated
      split() seperates strings on spaces (if left blank) or at the specified character
      ' '.join(list) converts a string to a list with no seperating character
        seperating characters can be specified in the ' '
    Lists can be sorted
      can be sorted and returned in a new list or can sort and mutate(overwrite) existing list
      sorted(list) returns a sorted version
      .sort() mutates and sorts in the list
      .reverse() mutates and reverses the list

  Aliasing
      Lists are objects that are referred to by variables
        L=[1,2,3]
        The list is actually just [1,2,3]
        L is the variable that refers to the object
      List variables are aliases
        Setting L=M would bind the same list object to both variables
        Any variable pointing to the same object will be altered by changes made to the list
      Just because two lists print the same does not mean they are the same structure
        This can be tested by mutating one list and comparing them
          L=[1,2,3]
          M=[1,2,3]
          Changing L would not effect M in this case because they are different structures
      Lists can be copied to new lists to avoid having 2 lists pointing to the same object
        Copy every element in a list with [:]
          M=L[:]
          M is now a copy of L, not the same structure
          Changing M will not change L
      Copies can also be made by sorting
        Sort will mutate the list but not return anything
        Sorted will not mutate a list, just sorts and returns Elements
      Lists can also be a list of Lists
        Binding a variable to a list like L=[M] will return [[elements of m]]
          L is a list with one element, the list M
          L can have multiple lists appended to it and it will return each list as a single element
          Changing one element of a sub list will change the element in the parent list
      Lists can be printed with concatenation as well
      Removing Duplicates
        Write a function that copies a list, iterates over the original list and removes any Duplicates
          def remove_dups(L1,L2
          L1_copy=L1[:]
          for e in L1_copy:
            if e in L2:
              L1.remove(e)

  Functions as objects
     Functions are first class objects
      have Types
      can be elements of data structures like Lists
      can appear in expressions
        as part of an assignment
        as an argument to another function
      This is useful when using functions as arguments coupled with Lists
        this is called higher order programing
        can be used to apply a function to each element of a list
      higher order procedure
        there is a general purpose version of this called Map
          runs a function against a list of suitable arguments
            map(abs,[1,-2,3,-4])
            when printed iteratively, it would show 1,2,3,4
          Can also be run against multiple lists when the function requires multiple arguments

  Dictionaries
    a data structure indexed by a custom label paired with data
    Use curly braces to represent a dictionary
      {key:element,key:element...}
      order is not important
    Operations
      dictionary[key] will return corresponding value
      entries are added with dictionary[new key]=element
      key in dictionary tests if the key is in the dictionary
      del(dictionary[key]) deletes the entry
      dictionary entered alone will return key:element
      dicitonary.keys() will return just the keys
      dictionary.values() returns just the Values
    Keys and values
      Values can be anything, any type and can be duplicates.
      Values can also be lists and other Dictionaries
      Keys must be unique and of an immutable type
      be careful with float type as a key
      there is no order to keys or Values
      can have multiple types of keys and values in one dictionary
    Example
      see song lyrics example

WEEK 4
  Defensive programing
    Help eliminate bugs before they happen by:
      Writing specifications for Functions
        What does it want and what will it give in return
      Modularize Programs
        Break a program into obvious pieces
      check conditions on inputs and outputs
      Document your thinking when designing
  Testing/Validation
    Comparing inputs and outputs
        Write a list of example ins and the expected outs
        Also, figure out how can you break the program
    Debugging
      Study the events leading to an error
      Ask why is it not working and how can I fix it
    When to test
      ensure the code runs (removes syntax and most static semantic errors)
      Generate a list of expected results
        have a set of inputs and the expected outputs
    Classes of Tests
      Unit testing
        test each piece functions separately
      regression testing
        add tests for bugs as you find them
        this catches reintroduced errors that have been previously fixed
      integration testing
        testing the whole program
        Don't rush to this phase
    Testing Approaches
      intuition testing
        use your intuition about where a natural place to test would be
      random testing
        test random places
      black box testing
        explore all paths through the specifications of the code
        code is not looked at, only the specification
        testing can be reused if implementation changes
        test all paths through the specifications, consider boundaries
      Glass box testing
        Looking at the code to design test cases
        test all branches
        code is path complete if every path is tested at least once
        can go through many arpitrary loops
        could miss paths
        Look for branches
        test loops both by going through them multiple times, one time and skipping them
        Still need to test boundary cases
  Bugs and Debugging
    Bugs
      Once you find bugs in the code
        Isolate them
        eradicate them
        retest
      Types of bugs
        Overt
          obvious indication of something wrong
            infinite loop or crash
          Good defensive programing can help ensure bugs fall in this category
        Covert bugs
          no obvious manifestation
            returns a wrong value
        persistent
          happens every time
          Good defensive programing can help ensure bugs fall in this category
        intermittent
          occur only some times, even with same inputs
    Debugging
      Steep learning curve
      Some builtin tools
        editors will show some errors
          index error
            access something that is outside the limits of a list
          type error
            trying to convert/use an inappropriate type
            mixing data types without appropriate conversion
          Name error
            referencing a non existent variable
          syntax error
            forgetting parentheses, quotes etc.
      check python tutor
      use print statements throughout to isolate what may be going wrong
        print parameters when you enter a function
        print results
        print parameters
        use the bisection method
          print half way through the code to narrow where the bug is
      be systematic in the search for bugs
      Logic Errors
        think before writing
        draw pictures/take a break
        explain the code
          to someone else
          to a rubber ducky
      Steps
        Study the code
          ask how you got the reult, why its wrong and is it part of a family
        use the scientific method
          study data
          form hypothesis
          pick test cases
          test
          repeat
      Dos/Donts
        Write a module at a time
        test and debug it
        write a function
        test and debug it
        do integration testing
        back up code before changing
        comment the bug
        test the changes
        compare them
  Exceptions
    what happens when the procedure hits an unexpected condition
    Types of exceptions
      Index Error
      Type Error
        Operand with incorrect type
      Name Error
        Local or global name not defined
      Syntax Error
        Python Can't parse the program
      Attribute Error
        Attribute reference fails
      Value Error
        operand type is ok but the value is not
      IO Error
        IO system reports a failure
          File not fout
    Don't use a fail silently exception handling
    Should return an error or stop execution
    Exception handling
      Any exception in a try statemen is handled by the except clause
      Exceptions can be called out by specific error
        Except typeerror: handles a type error
        multiples can be used
      else can be used with try to run something when the try completes correctly
      finnaly is always executed after any other clauses
      Example:
        try:
          Code
        except:
          exception handler
        else:
          Run if try works
        finnaly:
          ALWAYs run
        Continue from here
    Exceptions can be used as control flows
      Instead of returning special values when an error happens then checking for the error value
      write code to raise an exception when a non expected result is generated
      instead of writing code that runs when a criteria isn't met
      write code that runs based on the value generated
      raise <exception name>(arguments)
  Assertions
    raises an assertion error if an assumption on the state of the computation is not met
    Good defensive programing
    assert condition, return if not met
    helps ensure legal inputs
    stops immediately instead of continuing into code
    assertions help to spot bugs as soon as introduced
      help stop bad user input
      ude them to check types, data structures, constraints on returned values and violations of constraints

Week 5
Objects
  Everything in python is an object and has a type
    objects are a data abstraction
      each has an internal representation
      each has an interface for interacting through methods
        defines behavior but hides the implementation
      allows for creation of multiple instances
      allows for destruction of objects
        using del to forget them
        letting system garbage collect them
  Every object has 3 things
    Type
    an internal data representation
    a set of procedures for interaction
  objects are any data
    integers,strings,lists,dictionaries etc.
  every instance is an object
Data objects
  lists, tuples, strings
  once you know how they work, create your own
  use created as if internal
  example
    lists could be represented in memory by a series of consecutive slots
    usually, a pair of slots
      the first containing the object
      the second is a pointer to the next index
      [(object1,pointer to object2),(object2,pointer to object3)...]
      allows for arbitrary sizing
  Lists have an associated sed of methods
  internal representation should be private (manipulating this could compromise behavior)
Creating your own objects
  classes are used to create your own objects
  know the distinction between the class and an instance of it
    lists are a class, a specific list is an instance
  creating a class
    define the name for reference
    define the attributes
  using a class
    create new instances of the class
    perform operations on the instance
  Why classes?
    bundle data into packages along with procedures
      work on these bundles through well defined interfaces
    divide and conquer development
      implement and test behavior separately
      increased modularity = reduced complexity
    Easier to reuse code
Classes
  class keyword defines a new type
    class name(argument(parent class/object)):
      attributes
    the attribute 'object' means the class is a python object and will inherit all attributes of object
    name is subclass of object
    object is superclass of coordinate
  attributes
    data and procedures that belong to the class
    data attributes are other objects that make up the class
      numbers
    procedural attributes
      methods or functions that work only with that class
  creating an instance of an object
    use method __init__ to initialize some data attributes
    first argument refers to an instance of the class
    need to bind values passed in to the instance of the class
      def __init__(self,argument(s))
        self.attribute=argumentPassedIn
  printing a class
    use __str__ method to define what prints
    return (formatted output)
  use isinstance (object, class) to determine if an object is an instance of a class
  See lecture for special operators
    redefine what different operations look like for a specific class
    addition, subtraction, equality, length, print
    
