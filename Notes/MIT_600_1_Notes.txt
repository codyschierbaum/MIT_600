Declarative info: statement of fact
Imperative info: how to

Syntax: is the string legal
Static semantics: does the string have meaning
Semantics: the assigned meaning of a legal syntax string
Scalar types
  Int: Normal integer
  Float: Real number with decimal places
  Bool: Boolean true false
  Nonetype: Has no type

Operators
  -,+ Addition and subtraction
  *,/ Multiplication and division
  // Division to the whole number (leaves off the remainder)
  ** exponential
  % returns the remainder

Basic Structure
  [Object][Operator][Object]

Tests
  > greater than
  >= greater than or equal to
  < less than
  <= less than or equal to
  == equal
  != not equal

Variables (bindings)
  Names that can have values associated with them
  "Name"="value or expression"
  x=2
  x=x*x
  Names should be descriptive
  Some key words can't be used as a name (int, float ...)
  Values can be updated by re-assigning

Strings
  Sequence of characters
  Contained within double or single quotes
  Strings are non-scalar (pieces can be extracted from them)
  Elements start counting at 0
  Elements called using []
    Use [number:number] to call a range
      [number:] calls everything after element number
      [:number] calls everything before element number
    Use [:] to call a copy of a string
      Name=cody
      Name[0]: "c"
      Name[1:3]: "od"
      Name[:]="cody"
